{"version":3,"sources":["DetailRowView/DetailRowView.jsx","Loader/Loader.jsx","ModeSelector/ModeSelector.jsx","Table/Table.jsx","TableSearch/TableSearch.jsx","App.js","serviceWorker.js","index.js"],"names":["person","firstName","lastName","defaultValue","description","address","streetAddress","city","state","zip","className","props","style","display","justifyContent","padding","onClick","onSelect","type","onSort","bind","sortField","sort","data","map","item","key","id","phone","onRowSelect","email","useState","value","setValue","onSearch","onChange","e","target","App","isModeSelected","isLoading","search","row","currentPage","clonedData","_","orderBy","setState","pageChangeHandler","selected","modeSelectHandler","url","fetchData","searchHandler","this","fetch","response","json","filter","toLowerCase","includes","toString","filteredData","getFilteredData","pagesCount","Math","ceil","length","displayData","chunk","TableSearch","Table","previousLabel","nextLabel","breakLabel","breakClassName","pageCount","forcePage","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","activeClassName","pageClassName","previousClassName","nextClassName","pageLinkClassName","previousLinkClassName","nextLinkClassName","DetailRowView","ModeSelector","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4df5c100.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default ({person}) => (\r\n   <div>\r\n      <p>Выбран пользователь <b>{`${person.firstName} ${person.lastName}`}</b></p>\r\n      <p>\r\n         Описание: <br/>\r\n         <textarea defaultValue={person.description} />\r\n      </p>\r\n      <p>Адрес проживания: <b>{person.address.streetAddress}</b></p>\r\n      <p>Город: <b>{person.address.city}</b></p>\r\n      <p>Провинция/штат: <b>{person.address.state}</b></p>\r\n      <p>Индекс: <b>{person.address.zip}</b></p>\r\n   </div>\r\n)","import React from 'react'\r\nimport './Loader.css'\r\n\r\nexport default () => (\r\n   <div className=\"loader-wrap\">\r\n      <div className=\"lds-dual-ring\" />\r\n   </div>\r\n   \r\n)","import React from 'react'\r\n\r\nexport default props => {\r\n   const smallUrl = `http://www.filltext.com/?rows=32&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D`\r\n   const bigUrl = `http://www.filltext.com/?rows=1000&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&delay=3&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D`\r\n   \r\n   return (\r\n      <div style={{display: 'flex', justifyContent: 'center', padding: '50px 0'}}>\r\n         <button onClick={() => props.onSelect(smallUrl)} type=\"button\" className=\"btn btn-success mr-4\">32 элемента</button>\r\n         <button onClick={() => props.onSelect(bigUrl)} type=\"button\" className=\"btn btn-danger\">1000 элементов</button>\r\n      </div>\r\n      )\r\n   \r\n   \r\n}","import React from 'react'\r\n\r\nexport default props => (\r\n   <table className=\"table\">\r\n      <thead>\r\n      <tr>\r\n         <th onClick={props.onSort.bind(null, 'id')}>\r\n            ID {props.sortField === 'id' ? <small>{props.sort}</small> : null}\r\n         </th>\r\n         <th onClick={props.onSort.bind(null, 'firstName')}>\r\n            First Name {props.sortField === 'firstName' ? <small>{props.sort}</small> : null}\r\n         </th>\r\n         <th onClick={props.onSort.bind(null, 'lastName')}>\r\n            Last Name {props.sortField === 'lastName' ? <small>{props.sort}</small> : null}\r\n         </th>\r\n         <th onClick={props.onSort.bind(null, 'email')}>\r\n            Email {props.sortField === 'email' ? <small>{props.sort}</small> : null}\r\n         </th>\r\n         <th onClick={props.onSort.bind(null, 'phone')}>\r\n            Phone {props.sortField === 'phone' ? <small>{props.sort}</small> : null}\r\n         </th>\r\n      </tr>\r\n      </thead>\r\n      <tbody>\r\n      {props.data.map(item =>(\r\n         <tr key={item.id + item.phone} onClick={props.onRowSelect.bind(null, item)}>\r\n            <td>{item.id}</td>\r\n            <td>{item.firstName}</td>\r\n            <td>{item.lastName}</td>\r\n            <td>{item.email}</td>\r\n            <td>{item.phone}</td>\r\n         </tr>\r\n      ))}\r\n      </tbody>\r\n   </table>\r\n)","import React, {useState} from 'react'\r\n\r\nexport default props => {\r\n   const [value, setValue] = useState('')\r\n   \r\n   const valueChangeHandler = e => {\r\n      setValue(e.target.value)\r\n   }\r\n   \r\n   return (\r\n      <div className=\"input-group mb-3 mt-3\">\r\n         <div className=\"input-group-prepend\">\r\n            <button \r\n               className=\"btn btn-outline-secondary\"\r\n            onClick={() => props.onSearch(value)}>Search</button>\r\n         </div>\r\n         <input type=\"text\" \r\n                className=\"form-control\" \r\n                value={value} \r\n                onChange={valueChangeHandler}/>\r\n      </div>\r\n   )\r\n}","import React, {Component} from 'react';\nimport ReactPaginate      from 'react-paginate';\nimport DetailRowView      from \"./DetailRowView/DetailRowView\";\nimport Loader             from \"./Loader/Loader\";\nimport ModeSelector       from \"./ModeSelector/ModeSelector\";\nimport Table              from \"./Table/Table\";\nimport TableSearch        from \"./TableSearch/TableSearch\";\nimport _                  from 'lodash'\n\nclass App extends Component {\n\n   state = {\n      isModeSelected: false,\n      isLoading: false,\n      data: [],\n      search: '',\n      sort: 'asc', //desc\n      sortField: 'id',\n      row: null,\n      currentPage: 0\n   }\n\n   async fetchData(url) {\n      const {sortField, sort} = this.state\n      const response = await fetch(url)\n      const data = await response.json()\n\n      this.setState({ data: _.orderBy(data, sortField, sort), isLoading: false })\n   }\n\n   onSort = sortField => {\n      const clonedData = [...this.state.data]\n      const sort = this.state.sort === 'asc' ? 'desc' : 'asc'\n      const data = _.orderBy(clonedData, sortField, sort);\n      \n      this.setState({data, sort, sortField})\n   }\n\n   onRowSelect = row => {\n      this.setState({row})\n   }\n   pageChangeHandler = ({selected}) => {\n      this.setState({currentPage: selected})\n   }\n   modeSelectHandler = url => {\n      this.setState({ isModeSelected: true, isLoading: true })\n      this.fetchData(url)\n   }\n\n   searchHandler = search => {\n      this.setState({ search, currentPage: 0 })\n   }\n\n   getFilteredData() {\n      const {data, search}= this.state\n      if (!search) {\n         return data\n      } \n      return data.filter(item => {\n         return item['firstName'].toLowerCase().includes(search.toLowerCase()) \n            || item['lastName'].toLowerCase().includes(search.toLowerCase()) \n            || item['email'].toLowerCase().includes(search.toLowerCase()) \n            || item['id'].toString().includes(search.toLowerCase()) \n            || item['phone'].toString().includes(search.toLowerCase()) \n      })\n   }\n\n   render() {\n      const pageSize = 50;\n      const {isModeSelected, isLoading, sort, sortField, row, currentPage} = this.state;\n      const filteredData = this.getFilteredData()\n      const pagesCount = Math.ceil(filteredData.length / pageSize)\n      const displayData = _.chunk(filteredData, pageSize)[currentPage]\n      \n      if (!isModeSelected) {\n         return (\n            <div className=\"container\">\n               <ModeSelector onSelect={this.modeSelectHandler}/>\n            </div>\n         )\n      }\n      return (\n         <div className=\"container\">\n            {isLoading\n               ? <Loader/>\n               : <>\n                  <TableSearch onSearch={this.searchHandler}/>\n                  <Table\n                     onSort={this.onSort}\n                     data={displayData}\n                     sort={sort}\n                     sortField={sortField}\n                     onRowSelect={this.onRowSelect}\n                  />\n               </>\n            }\n            {\n               this.state.data.length > pageSize\n               && <ReactPaginate\n                  previousLabel={'<'}\n                  nextLabel={'>'}\n                  breakLabel={'...'}\n                  breakClassName={'break-me'}\n                  pageCount={pagesCount}\n                  forcePage={currentPage}\n                  marginPagesDisplayed={2}\n                  pageRangeDisplayed={5}\n                  onPageChange={this.pageChangeHandler}\n                  containerClassName={'pagination'}\n                  activeClassName={'active'}\n                  pageClassName={'page-item'}\n                  previousClassName={'page-item'}\n                  nextClassName={'page-item'}\n                  pageLinkClassName={'page-link'}\n                  previousLinkClassName={'page-link'}\n                  nextLinkClassName={'page-link'}\n               />\n            }\n            {\n               row\n                  ? <DetailRowView person={row}/>\n                  : null\n            }\n\n         </div>\n      )\n   }\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React              from 'react';\nimport ReactDOM           from 'react-dom';\nimport App                from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}